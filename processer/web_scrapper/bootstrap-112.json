{
    "id": 112,
    "url": "https://getbootstrap.com/docs/5.3/getting-started/javascript/",
    "title": "JavaScript",
    "content": "View on GitHub                                JavaScript                Bring Bootstrap to life with our optional JavaScript plugins. Learn about each plugin, our data and programmatic API options, and more.                                    On this page                                On this page                                      Individual or compiled    Usage with JavaScript frameworks    Using Bootstrap as a module    Dependencies    Data attributes    Selectors    Events    Programmatic API              CSS selectors in constructors        Asynchronous functions and transitions                      dispose method                          Default settings              Methods and properties    Sanitizer    Optionally using jQuery              No conflict        jQuery events              Disabled JavaScript                                    Individual or compiled Plugins can be included individually (using Bootstrap\u2019s individual js/dist/*.js), or all at once using bootstrap.js or the minified bootstrap.min.js (don\u2019t include both).If you use a bundler (Webpack, Parcel, Vite\u2026), you can use /js/dist/*.js files which are UMD ready.Usage with JavaScript frameworks While the Bootstrap CSS can be used with any framework, the Bootstrap JavaScript is not fully compatible with JavaScript frameworks like React, Vue, and Angular which assume full knowledge of the DOM. Both Bootstrap and the framework may attempt to mutate the same DOM element, resulting in bugs like dropdowns that are stuck in the \u201copen\u201d position.A better alternative for those using this type of frameworks is to use a framework-specific package instead of the Bootstrap JavaScript. Here are some of the most popular options:React: React BootstrapTry it yourself! Download the source code and working demo for using Bootstrap with React, Next.js, and React Bootstrap from the twbs/examples repository. You can also open the example in StackBlitz.Vue: BootstrapVue (Bootstrap 4)Vue 3: BootstrapVueNext (Bootstrap 5, currently in alpha)Angular: ng-bootstrapUsing Bootstrap as a module Try it yourself! Download the source code and working demo for using Bootstrap as an ES module from the twbs/examples repository. You can also open the example in StackBlitz.We provide a version of Bootstrap built as ESM (bootstrap.esm.js and bootstrap.esm.min.js) which allows you to use Bootstrap as a module in the browser, if your targeted browsers support it.<script type=\"module\">  import { Toast } from 'bootstrap.esm.min.js'  Array.from(document.querySelectorAll('.toast'))    .forEach(toastNode => new Toast(toastNode))</script>Compared to JS bundlers, using ESM in the browser requires you to use the full path and filename instead of the module name. Read more about JS modules in the browser. That\u2019s why we use 'bootstrap.esm.min.js' instead of 'bootstrap' above. However, this is further complicated by our Popper dependency, which imports Popper into our JavaScript like so:import * as Popper from \"@popperjs/core\"If you try this as-is, you\u2019ll see an error in the console like the following:Uncaught TypeError: Failed to resolve module specifier \"@popperjs/core\". Relative references must start with either \"/\", \"./\", or \"../\".To fix this, you can use an importmap to resolve the arbitrary module names to complete paths. If your targeted browsers do not support importmap, you\u2019ll need to use the es-module-shims project. Here\u2019s how it works for Bootstrap and Popper:<!doctype html><html lang=\"en\">  <head>    <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">    <title>Hello, modularity!</title>  </head>  <body>    <h1>Hello, modularity!</h1>    <button id=\"popoverButton\" type=\"button\" class=\"btn btn-primary btn-lg\" data-bs-toggle=\"popover\" title=\"ESM in Browser\" data-bs-content=\"Bang!\">Custom popover</button>    <script async src=\"https://cdn.jsdelivr.net/npm/es-module-shims@1/dist/es-module-shims.min.js\" crossorigin=\"anonymous\"></script>    <script type=\"importmap\">    {      \"imports\": {        \"@popperjs/core\": \"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/esm/popper.min.js\",        \"bootstrap\": \"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.esm.min.js\"      }    }    </script>    <script type=\"module\">      import * as bootstrap from 'bootstrap'      new bootstrap.Popover(document.getElementById('popoverButton'))    </script>  </body></html>Dependencies Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs.Our dropdowns, popovers, and tooltips also depend on Popper.Data attributes Nearly all Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to only use one set of data attributes on a single element (e.g., you cannot trigger a tooltip and modal from the same button.)As options can be passed via data attributes or JavaScript, you can append an option name to data-bs-, as in data-bs-animation=\"{value}\". Make sure to change the case type of the option name from \u201ccamelCase\u201d to \u201ckebab-case\u201d when passing the options via data attributes. For example, use data-bs-custom-class=\"beautifier\" instead of data-bs-customClass=\"beautifier\".As of Bootstrap 5.2.0, all components support an experimental reserved data attribute data-bs-config that can house simple component configuration as a JSON string. When an element has data-bs-config='{\"delay\":0, \"title\":123}' and data-bs-title=\"456\" attributes, the final title value will be 456 and the separate data attributes will override values given on data-bs-config. In addition, existing data attributes are able to house JSON values like data-bs-delay='{\"show\":0,\"hide\":150}'.The final configuration object is the merged result of data-bs-config, data-bs-, and js object where the latest given key-value overrides the others.Selectors We use the native querySelector and querySelectorAll methods to query DOM elements for performance reasons, so you must use valid selectors. If you use special selectors like collapse:Example, be sure to escape them.Events Bootstrap provides custom events for most plugins\u2019 unique actions. Generally, these come in an infinitive and past participle form - where the infinitive (ex. show) is triggered at the start of an event, and its past participle form (ex. shown) is triggered on the completion of an action.All infinitive events provide preventDefault() functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call preventDefault().const myModal = document.querySelector('#myModal')myModal.addEventListener('show.bs.modal', event => {  return event.preventDefault() // stops modal from being shown})Programmatic API All constructors accept an optional options object or nothing (which initiates a plugin with its default behavior):const myModalEl = document.querySelector('#myModal')const modal = new bootstrap.Modal(myModalEl) // initialized with defaultsconst configObject = { keyboard: false }const modal1 = new bootstrap.Modal(myModalEl, configObject) // initialized with no keyboardIf you\u2019d like to get a particular plugin instance, each plugin exposes a getInstance method. For example, to retrieve an instance directly from an element:bootstrap.Popover.getInstance(myPopoverEl)This method will return null if an instance is not initiated over the requested element.Alternatively, getOrCreateInstance can be used to get the instance associated with a DOM element, or create a new one in case it wasn\u2019t initialized.bootstrap.Popover.getOrCreateInstance(myPopoverEl, configObject)In case an instance wasn\u2019t initialized, it may accept and use an optional configuration object as second argument.CSS selectors in constructors In addition to the getInstance and getOrCreateInstance methods, all plugin constructors can accept a DOM element or a valid CSS selector as the first argument. Plugin elements are found with the querySelector method since our plugins only support a single element.const modal = new bootstrap.Modal('#myModal')const dropdown = new bootstrap.Dropdown('[data-bs-toggle=\"dropdown\"]')const offcanvas = bootstrap.Offcanvas.getInstance('#myOffcanvas')const alert = bootstrap.Alert.getOrCreateInstance('#myAlert')Asynchronous functions and transitions All programmatic API methods are asynchronous and return to the caller once the transition is started, but before it ends. In order to execute an action once the transition is complete, you can listen to the corresponding event.const myCollapseEl = document.querySelector('#myCollapse')myCollapseEl.addEventListener('shown.bs.collapse', event => {  // Action to execute once the collapsible area is expanded})In addition, a method call on a transitioning component will be ignored.const myCarouselEl = document.querySelector('#myCarousel')const carousel = bootstrap.Carousel.getInstance(myCarouselEl) // Retrieve a Carousel instancemyCarouselEl.addEventListener('slid.bs.carousel', event => {  carousel.to('2') // Will slide to the slide 2 as soon as the transition to slide 1 is finished})carousel.to('1') // Will start sliding to the slide 1 and returns to the callercarousel.to('2') // !! Will be ignored, as the transition to the slide 1 is not finished !!dispose method While it may seem correct to use the dispose method immediately after hide(), it will lead to incorrect results. Here\u2019s an example of the problem use:const myModal = document.querySelector('#myModal')myModal.hide() // it is asynchronousmyModal.addEventListener('shown.bs.hidden', event => {  myModal.dispose()})Default settings You can change the default settings for a plugin by modifying the plugin\u2019s Constructor.Default object:// changes default for the modal plugin's `keyboard` option to falsebootstrap.Modal.Default.keyboard = falseMethods and properties Every Bootstrap plugin exposes the following methods and static properties.MethodDescriptiondisposeDestroys an element\u2019s modal. (Removes stored data on the DOM element)getInstanceStatic method which allows you to get the modal instance associated with a DOM element.getOrCreateInstanceStatic method which allows you to get the modal instance associated with a DOM element, or create a new one in case it wasn\u2019t initialized.Static propertyDescriptionNAMEReturns the plugin name. (Example: bootstrap.Tooltip.NAME)VERSIONThe version of each of Bootstrap\u2019s plugins can be accessed via the VERSION property of the plugin\u2019s constructor (Example: bootstrap.Tooltip.VERSION)Sanitizer Tooltips and Popovers use our built-in sanitizer to sanitize options which accept HTML.The default allowList value is the following:          js/src/util/sanitizer.js                                          const ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/iexport const DefaultAllowlist = {  // Global attributes allowed on any supplied element below.  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],  a: ['target', 'href', 'title', 'rel'],  area: [],  b: [],  br: [],  col: [],  code: [],  dd: [],  div: [],  dl: [],  dt: [],  em: [],  hr: [],  h1: [],  h2: [],  h3: [],  h4: [],  h5: [],  h6: [],  i: [],  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],  li: [],  ol: [],  p: [],  pre: [],  s: [],  small: [],  span: [],  sub: [],  sup: [],  strong: [],  u: [],  ul: []}If you want to add new values to this default allowList you can do the following:const myDefaultAllowList = bootstrap.Tooltip.Default.allowList// To allow table elementsmyDefaultAllowList.table = []// To allow td elements and data-bs-option attributes on td elementsmyDefaultAllowList.td = ['data-bs-option']// You can push your custom regex to validate your attributes.// Be careful about your regular expressions being too laxconst myCustomRegex = /^data-my-app-[\\w-]+/myDefaultAllowList['*'].push(myCustomRegex)If you want to bypass our sanitizer because you prefer to use a dedicated library, for example DOMPurify, you should do the following:const yourTooltipEl = document.querySelector('#yourTooltip')const tooltip = new bootstrap.Tooltip(yourTooltipEl, {  sanitizeFn(content) {    return DOMPurify.sanitize(content)  }})Optionally using jQuery You don\u2019t need jQuery in Bootstrap 5, but it\u2019s still possible to use our components with jQuery. If Bootstrap detects jQuery in the window object, it\u2019ll add all of our components in jQuery\u2019s plugin system. This allows you to do the following:// to enable tooltips with the default configuration$('[data-bs-toggle=\"tooltip\"]').tooltip()// to initialize tooltips with given configuration$('[data-bs-toggle=\"tooltip\"]').tooltip({  boundary: 'clippingParents',  customClass: 'myClass'})// to trigger the `show` method$('#myTooltip').tooltip('show')The same goes for our other components.No conflict Sometimes it is necessary to use Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call .noConflict on the plugin you wish to revert the value of.const bootstrapButton = $.fn.button.noConflict() // return $.fn.button to previously assigned value$.fn.bootstrapBtn = bootstrapButton // give $().bootstrapBtn the Bootstrap functionalityBootstrap does not officially support third-party JavaScript libraries like Prototype or jQuery UI. Despite .noConflict and namespaced events, there may be compatibility problems that you need to fix on your own.jQuery events Bootstrap will detect jQuery if jQuery is present in the window object and there is no data-bs-no-jquery attribute set on <body>. If jQuery is found, Bootstrap will emit events thanks to jQuery\u2019s event system. So if you want to listen to Bootstrap\u2019s events, you\u2019ll have to use the jQuery methods (.on, .one) instead of addEventListener.$('#myTab a').on('shown.bs.tab', () => {  // do something...})Disabled JavaScript Bootstrap\u2019s plugins have no special fallback when JavaScript is disabled. If you care about the user experience in this case, use <noscript> to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks."
}