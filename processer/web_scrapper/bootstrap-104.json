{
    "id": 104,
    "url": "https://getbootstrap.com/docs/5.3/getting-started/rtl/",
    "title": "RTL",
    "content": "View on GitHub                                RTL                Learn how to enable support for right-to-left text in Bootstrap across our layout, components, and utilities.                                    On this page                                On this page                                      Get familiar    Required HTML              Starter template        RTL examples              Approach    Customize from source              Custom RTL values        Alternative font stack        LTR and RTL at the same time              The breadcrumb case    Additional resources                                    Get familiar We recommend getting familiar with Bootstrap first by reading through our Getting Started Introduction page. Once you\u2019ve run through it, continue reading here for how to enable RTL.You may also want to read up on the RTLCSS project, as it powers our approach to RTL.Bootstrap\u2019s RTL feature is still experimental and will evolve based on user feedback. Spotted something or have an improvement to suggest? Open an issue, we\u2019d love to get your insights.Required HTML There are two strict requirements for enabling RTL in Bootstrap-powered pages.Set dir=\"rtl\" on the <html> element.Add an appropriate lang attribute, like lang=\"ar\", on the <html> element.From there, you\u2019ll need to include an RTL version of our CSS. For example, here\u2019s the stylesheet for our compiled and minified CSS with RTL enabled:<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.rtl.min.css\" integrity=\"sha384-dpuaG1suU0eT09tx5plTaGMLBsfDLzUCCUXOY2j/LSvXYuG6Bqs43ALlhIqAJVRb\" crossorigin=\"anonymous\">Starter template You can see the above requirements reflected in this modified RTL starter template.<!doctype html><html lang=\"ar\" dir=\"rtl\">  <head>    <!-- Required meta tags -->    <meta charset=\"utf-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">    <!-- Bootstrap CSS -->    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.rtl.min.css\" integrity=\"sha384-dpuaG1suU0eT09tx5plTaGMLBsfDLzUCCUXOY2j/LSvXYuG6Bqs43ALlhIqAJVRb\" crossorigin=\"anonymous\">    <title>\u0645\u0631\u062d\u0628\u064b\u0627 \u0628\u0627\u0644\u0639\u0627\u0644\u0645!</title>  </head>  <body>    <h1>\u0645\u0631\u062d\u0628\u064b\u0627 \u0628\u0627\u0644\u0639\u0627\u0644\u0645!</h1>    <!-- Optional JavaScript; choose one of the two! -->    <!-- Option 1: Bootstrap Bundle with Popper -->    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>    <!-- Option 2: Separate Popper and Bootstrap JS -->    <!--    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js\" integrity=\"sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r\" crossorigin=\"anonymous\"></script>    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js\" integrity=\"sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy\" crossorigin=\"anonymous\"></script>    -->  </body></html>RTL examples Get started with one of our several RTL examples.Approach Our approach to building RTL support into Bootstrap comes with two important decisions that impact how we write and use our CSS:First, we decided to build it with the RTLCSS project. This gives us some powerful features for managing changes and overrides when moving from LTR to RTL. It also allows us to build two versions of Bootstrap from one codebase.Second, we\u2019ve renamed a handful of directional classes to adopt a logical properties approach. Most of you have already interacted with logical properties thanks to our flex utilities\u2014they replace direction properties like left and right in favor start and end. That makes the class names and values appropriate for LTR and RTL without any overhead.For example, instead of .ml-3 for margin-left, use .ms-3.Working with RTL, through our source Sass or compiled CSS, shouldn\u2019t be much different from our default LTR though.Customize from source When it comes to customization, the preferred way is to take advantage of variables, maps, and mixins. This approach works the same for RTL, even if it\u2019s post-processed from the compiled files, thanks to how RTLCSS works.Custom RTL values Using RTLCSS value directives, you can make a variable output a different value for RTL. For example, to decrease the weight for $font-weight-bold throughout the codebase, you may use the /*rtl: {value}*/ syntax:$font-weight-bold: 700 #{/* rtl:600 */} !default;Which would output to the following for our default CSS and RTL CSS:/* bootstrap.css */dt {  font-weight: 700 /* rtl:600 */;}/* bootstrap.rtl.css */dt {  font-weight: 600;}Alternative font stack In the case you\u2019re using a custom font, be aware that not all fonts support the non-Latin alphabet. To switch from Pan-European to Arabic family, you may need to use /*rtl:insert: {value}*/ in your font stack to modify the names of font families.For example, to switch from Helvetica Neue font for LTR to Helvetica Neue Arabic for RTL, your Sass code could look like this:$font-family-sans-serif:  Helvetica Neue #{\"/* rtl:insert:Arabic */\"},  // Cross-platform generic font family (default user interface font)  system-ui,  // Safari for macOS and iOS (San Francisco)  -apple-system,  // Chrome < 56 for macOS (San Francisco)  BlinkMacSystemFont,  // Windows  \"Segoe UI\",  // Android  Roboto,  // Basic web fallback  Arial,  // Linux  \"Noto Sans\",  // Sans serif fallback  sans-serif,  // Emoji fonts  \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" !default;LTR and RTL at the same time Need both LTR and RTL on the same page? Thanks to RTLCSS String Maps, this is pretty straightforward. Wrap your @imports with a class, and set a custom rename rule for RTLCSS:/* rtl:begin:options: {  \"autoRename\": true,  \"stringMap\":[ {    \"name\": \"ltr-rtl\",    \"priority\": 100,    \"search\": [\"ltr\"],    \"replace\": [\"rtl\"],    \"options\": {      \"scope\": \"*\",      \"ignoreCase\": false    }  } ]} */.ltr {  @import \"../node_modules/bootstrap/scss/bootstrap\";}/*rtl:end:options*/After running Sass then RTLCSS, each selector in your CSS files will be prepended by .ltr, and .rtl for RTL files. Now you\u2019re able to use both files on the same page, and simply use .ltr or .rtl on your components wrappers to use one or the other direction.Edge cases and known limitations to consider when working with a combined LTR and RTL implementation:When switching .ltr and .rtl, make sure you add dir and lang attributes accordingly.Loading both files can be a real performance bottleneck: consider some optimization, and maybe try to load one of those files asynchronously.Nesting styles this way will prevent our form-validation-state() mixin from working as intended, thus require you tweak it a bit by yourself. See #31223.The breadcrumb case The breadcrumb separator is the only case requiring its own brand-new variable\u2014 namely $breadcrumb-divider-flipped \u2014defaulting to $breadcrumb-divider.Additional resources RTLCSSRTL Styling 101"
}