{
    "id": 49,
    "url": "https://getbootstrap.com/docs/5.3/components/popovers/",
    "title": "Popovers",
    "content": "View on GitHub                                Popovers                Documentation and examples for adding Bootstrap popovers, like those found in iOS, to any element on your site.                                    On this page                                On this page                                      Overview    Examples              Enable popovers        Live demo        Four directions        Custom container        Custom popovers        Dismiss on next click        Disabled elements              CSS              Variables        Sass variables              Usage              Options                      Using function with popperConfig                          Methods        Events                                              Overview Things to know when using the popover plugin:Popovers rely on the third party library Popper for positioning. You must include popper.min.js before bootstrap.js, or use one bootstrap.bundle.min.js which contains Popper.Popovers require the popover plugin as a dependency.Popovers are opt-in for performance reasons, so you must initialize them yourself.Zero-length title and content values will never show a popover.Specify container: 'body' to avoid rendering problems in more complex components (like our input groups, button groups, etc).Triggering popovers on hidden elements will not work.Popovers for .disabled or disabled elements must be triggered on a wrapper element.When triggered from anchors that wrap across multiple lines, popovers will be centered between the anchors\u2019 overall width. Use .text-nowrap on your <a>s to avoid this behavior.Popovers must be hidden before their corresponding elements have been removed from the DOM.Popovers can be triggered thanks to an element inside a shadow DOM.By default, this component uses the built-in content sanitizer, which strips out any HTML elements that are not explicitly allowed. See the sanitizer section in our JavaScript documentation for more details.The animation effect of this component is dependent on the prefers-reduced-motion media query. See the reduced motion section of our accessibility documentation.Keep reading to see how popovers work with some examples.Examples Enable popovers As mentioned above, you must initialize popovers before they can be used. One way to initialize all popovers on a page would be to select them by their data-bs-toggle attribute, like so:const popoverTriggerList = document.querySelectorAll('[data-bs-toggle=\"popover\"]')const popoverList = [...popoverTriggerList].map(popoverTriggerEl => new bootstrap.Popover(popoverTriggerEl))Live demo We use JavaScript similar to the snippet above to render the following live popover. Titles are set via data-bs-title and body content is set via data-bs-content.Feel free to use either title or data-bs-title in your HTML. When title is used, Popper will replace it automatically with data-bs-title when the element is rendered.      Click to toggle popover          html                                                                                      <button type=\"button\" class=\"btn btn-lg btn-danger\" data-bs-toggle=\"popover\" data-bs-title=\"Popover title\" data-bs-content=\"And here's some amazing content. It's very engaging. Right?\">Click to toggle popover</button>Four directions Four options are available: top, right, bottom, and left. Directions are mirrored when using Bootstrap in RTL. Set data-bs-placement to change the direction.        Popover on top  Popover on right  Popover on bottom  Popover on left          html                                                                                      <button type=\"button\" class=\"btn btn-secondary\" data-bs-container=\"body\" data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-content=\"Top popover\">  Popover on top</button><button type=\"button\" class=\"btn btn-secondary\" data-bs-container=\"body\" data-bs-toggle=\"popover\" data-bs-placement=\"right\" data-bs-content=\"Right popover\">  Popover on right</button><button type=\"button\" class=\"btn btn-secondary\" data-bs-container=\"body\" data-bs-toggle=\"popover\" data-bs-placement=\"bottom\" data-bs-content=\"Bottom popover\">  Popover on bottom</button><button type=\"button\" class=\"btn btn-secondary\" data-bs-container=\"body\" data-bs-toggle=\"popover\" data-bs-placement=\"left\" data-bs-content=\"Left popover\">  Popover on left</button>Custom container When you have some styles on a parent element that interfere with a popover, you\u2019ll want to specify a custom container so that the popover\u2019s HTML appears within that element instead. This is common in responsive tables, input groups, and the like.const popover = new bootstrap.Popover('.example-popover', {  container: 'body'})Another situation where you\u2019ll want to set an explicit custom container are popovers inside a modal dialog, to make sure that the popover itself is appended to the modal. This is particularly important for popovers that contain interactive elements \u2013 modal dialogs will trap focus, so unless the popover is a child element of the modal, users won\u2019t be able to focus or activate these interactive elements.const popover = new bootstrap.Popover('.example-popover', {  container: '.modal-body'})Custom popovers Added in v5.2.0You can customize the appearance of popovers using CSS variables. We set a custom class with data-bs-custom-class=\"custom-popover\" to scope our custom appearance and use it to override some of the local CSS variables.          site/assets/scss/_component-examples.scss                                          .custom-popover {  --bs-popover-max-width: 200px;  --bs-popover-border-color: var(--bd-violet-bg);  --bs-popover-header-bg: var(--bd-violet-bg);  --bs-popover-header-color: var(--bs-white);  --bs-popover-body-padding-x: 1rem;  --bs-popover-body-padding-y: .5rem;}        Custom popover          html                                                                                      <button type=\"button\" class=\"btn btn-secondary\"        data-bs-toggle=\"popover\" data-bs-placement=\"right\"        data-bs-custom-class=\"custom-popover\"        data-bs-title=\"Custom popover\"        data-bs-content=\"This popover is themed via CSS variables.\">  Custom popover</button>Dismiss on next click Use the focus trigger to dismiss popovers on the user\u2019s next click of an element other than the toggle element.Dismissing on next click requires specific HTML for proper cross-browser and cross-platform behavior. You can only use <a> elements, not <button>s, and you must include a tabindex.      Dismissible popover          html                                                                                      <a tabindex=\"0\" class=\"btn btn-lg btn-danger\" role=\"button\" data-bs-toggle=\"popover\" data-bs-trigger=\"focus\" data-bs-title=\"Dismissible popover\" data-bs-content=\"And here's some amazing content. It's very engaging. Right?\">Dismissible popover</a>const popover = new bootstrap.Popover('.popover-dismiss', {  trigger: 'focus'})Disabled elements Elements with the disabled attribute aren\u2019t interactive, meaning users cannot hover or click them to trigger a popover (or tooltip). As a workaround, you\u2019ll want to trigger the popover from a wrapper <div> or <span>, ideally made keyboard-focusable using tabindex=\"0\".For disabled popover triggers, you may also prefer data-bs-trigger=\"hover focus\" so that the popover appears as immediate visual feedback to your users as they may not expect to click on a disabled element.        Disabled button          html                                                                                      <span class=\"d-inline-block\" tabindex=\"0\" data-bs-toggle=\"popover\" data-bs-trigger=\"hover focus\" data-bs-content=\"Disabled popover\">  <button class=\"btn btn-primary\" type=\"button\" disabled>Disabled button</button></span>CSS Variables Added in v5.2.0As part of Bootstrap\u2019s evolving CSS variables approach, popovers now use local CSS variables on .popover for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.          scss/_popover.scss                                          --#{$prefix}popover-zindex: #{$zindex-popover};--#{$prefix}popover-max-width: #{$popover-max-width};@include rfs($popover-font-size, --#{$prefix}popover-font-size);--#{$prefix}popover-bg: #{$popover-bg};--#{$prefix}popover-border-width: #{$popover-border-width};--#{$prefix}popover-border-color: #{$popover-border-color};--#{$prefix}popover-border-radius: #{$popover-border-radius};--#{$prefix}popover-inner-border-radius: #{$popover-inner-border-radius};--#{$prefix}popover-box-shadow: #{$popover-box-shadow};--#{$prefix}popover-header-padding-x: #{$popover-header-padding-x};--#{$prefix}popover-header-padding-y: #{$popover-header-padding-y};@include rfs($popover-header-font-size, --#{$prefix}popover-header-font-size);--#{$prefix}popover-header-color: #{$popover-header-color};--#{$prefix}popover-header-bg: #{$popover-header-bg};--#{$prefix}popover-body-padding-x: #{$popover-body-padding-x};--#{$prefix}popover-body-padding-y: #{$popover-body-padding-y};--#{$prefix}popover-body-color: #{$popover-body-color};--#{$prefix}popover-arrow-width: #{$popover-arrow-width};--#{$prefix}popover-arrow-height: #{$popover-arrow-height};--#{$prefix}popover-arrow-border: var(--#{$prefix}popover-border-color);Sass variables           scss/_variables.scss                                          $popover-font-size:                 $font-size-sm;$popover-bg:                        var(--#{$prefix}body-bg);$popover-max-width:                 276px;$popover-border-width:              var(--#{$prefix}border-width);$popover-border-color:              var(--#{$prefix}border-color-translucent);$popover-border-radius:             var(--#{$prefix}border-radius-lg);$popover-inner-border-radius:       calc(#{$popover-border-radius} - #{$popover-border-width}); // stylelint-disable-line function-disallowed-list$popover-box-shadow:                var(--#{$prefix}box-shadow);$popover-header-font-size:          $font-size-base;$popover-header-bg:                 var(--#{$prefix}secondary-bg);$popover-header-color:              $headings-color;$popover-header-padding-y:          .5rem;$popover-header-padding-x:          $spacer;$popover-body-color:                var(--#{$prefix}body-color);$popover-body-padding-y:            $spacer;$popover-body-padding-x:            $spacer;$popover-arrow-width:               1rem;$popover-arrow-height:              .5rem;Usage Enable popovers via JavaScript:const exampleEl = document.getElementById('example')const popover = new bootstrap.Popover(exampleEl, options)Keep popovers accessible to keyboard and assistive technology users by only adding them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). While other HTML elements can be made focusable by adding tabindex=\"0\", this can create annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce popovers in this situation. Additionally, do not rely solely on hover as the trigger for your popovers as this will make them impossible to trigger for keyboard users.Avoid adding an excessive amount of content in popovers with the html option. Once popovers are displayed, their content is tied to the trigger element with the aria-describedby attribute, causing all of the popover\u2019s content to be announced to assistive technology users as one long, uninterrupted stream.Popovers do not manage keyboard focus order, and their placement can be random in the DOM, so be careful when adding interactive elements (like forms or links), as it may lead to an illogical focus order or make the popover content itself completely unreachable for keyboard users. In cases where you must use these elements, consider using a modal dialog instead.Options As options can be passed via data attributes or JavaScript, you can append an option name to data-bs-, as in data-bs-animation=\"{value}\". Make sure to change the case type of the option name from \u201ccamelCase\u201d to \u201ckebab-case\u201d when passing the options via data attributes. For example, use data-bs-custom-class=\"beautifier\" instead of data-bs-customClass=\"beautifier\".As of Bootstrap 5.2.0, all components support an experimental reserved data attribute data-bs-config that can house simple component configuration as a JSON string. When an element has data-bs-config='{\"delay\":0, \"title\":123}' and data-bs-title=\"456\" attributes, the final title value will be 456 and the separate data attributes will override values given on data-bs-config. In addition, existing data attributes are able to house JSON values like data-bs-delay='{\"show\":0,\"hide\":150}'.The final configuration object is the merged result of data-bs-config, data-bs-, and js object where the latest given key-value overrides the others.Note that for security reasons the sanitize, sanitizeFn, and allowList options cannot be supplied using data attributes.NameTypeDefaultDescriptionallowListobjectDefault valueObject which contains allowed attributes and tags.animationbooleantrueApply a CSS fade transition to the popover.boundarystring, element'clippingParents'Overflow constraint boundary of the popover (applies only to Popper\u2019s preventOverflow modifier). By default, it\u2019s 'clippingParents' and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper\u2019s detectOverflow docs.containerstring, element, falsefalseAppends the popover to a specific element. Example: container: 'body'. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -\u00a0which will prevent the popover from floating away from the triggering element during a window resize.contentstring, element, function''The popover\u2019s text content. If a function is given, it will be called with its this reference set to the element that the popover is attached to.customClassstring, function''Add classes to the popover when it is shown. Note that these classes will be added in addition to any classes specified in the template. To add multiple classes, separate them with spaces: 'class-1 class-2'. You can also pass a function that should return a single string containing additional class names.delaynumber, object0Delay showing and hiding the popover (ms)\u2014doesn\u2019t apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is: delay: { \"show\": 500, \"hide\": 100 }.fallbackPlacementsstring, array['top', 'right', 'bottom', 'left']Define fallback placements by providing a list of placements in array (in order of preference). For more information refer to Popper\u2019s behavior docs.htmlbooleanfalseAllow HTML in the popover. If true, HTML tags in the popover\u2019s title will be rendered in the popover. If false, innerText property will be used to insert content into the DOM. Use text if you\u2019re worried about XSS attacks.offsetnumber, string, function[0, 0]Offset of the popover relative to its target. You can pass a string in data attributes with comma separated values like: data-bs-offset=\"10,20\". When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers: skidding, distance. For more information refer to Popper\u2019s offset docs.placementstring, function'top'How to position the popover: auto, top, bottom, left, right. When auto is specified, it will dynamically reorient the popover. When a function is used to determine the placement, it is called with the popover DOM node as its first argument and the triggering element DOM node as its second. The this context is set to the popover instance.popperConfignull, object, functionnullTo change Bootstrap\u2019s default Popper config, see Popper\u2019s configuration. When a function is used to create the Popper configuration, it\u2019s called with an object that contains the Bootstrap\u2019s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper.sanitizebooleantrueEnable or disable the sanitization. If activated 'template', 'content' and 'title' options will be sanitized.sanitizeFnnull, functionnullHere you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization.selectorstring, falsefalseIf a selector is provided, popover objects will be delegated to the specified targets. In practice, this is used to also apply popovers to dynamically added DOM elements (jQuery.on support). See this issue and an informative example. Note: title attribute must not be used as a selector.templatestring'<div class=\"popover\" role=\"tooltip\"><div class=\"popover-arrow\"></div><div class=\"popover-inner\"></div></div>'Base HTML to use when creating the popover. The popover\u2019s title will be injected into the .popover-inner. .popover-arrow will become the popover\u2019s arrow. The outermost wrapper element should have the .popover class and role=\"tooltip\".titlestring, element, function''The popover title. If a function is given, it will be called with its this reference set to the element that the popover is attached to.triggerstring'hover focus'How popover is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space. 'manual' indicates that the popover will be triggered programmatically via the .popover('show'), .popover('hide') and .popover('toggle') methods; this value cannot be combined with any other trigger. 'hover' on its own will result in popovers that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present.Data attributes for individual popovers Options for individual popovers can alternatively be specified through the use of data attributes, as explained above.Using function with popperConfig const popover = new bootstrap.Popover(element, {  popperConfig(defaultBsPopperConfig) {    // const newPopperConfig = {...}    // use defaultBsPopperConfig if needed...    // return newPopperConfig  }})Methods All API methods are asynchronous and start a transition. They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. Learn more in our JavaScript docs.MethodDescriptiondisableRemoves the ability for an element\u2019s popover to be shown. The popover will only be able to be shown if it is re-enabled.disposeHides and destroys an element\u2019s popover (Removes stored data on the DOM element). Popovers that use delegation (which are created using the selector option) cannot be individually destroyed on descendant trigger elements.enableGives an element\u2019s popover the ability to be shown. Popovers are enabled by default.getInstanceStatic method which allows you to get the popover instance associated with a DOM element.getOrCreateInstanceStatic method which allows you to get the popover instance associated with a DOM element, or create a new one in case it wasn\u2019t initialized.hideHides an element\u2019s popover. Returns to the caller before the popover has actually been hidden (i.e. before the hidden.bs.popover event occurs). This is considered a \u201cmanual\u201d triggering of the popover.setContentGives a way to change the popover\u2019s content after its initialization.showReveals an element\u2019s popover. Returns to the caller before the popover has actually been shown (i.e. before the shown.bs.popover event occurs). This is considered a \u201cmanual\u201d triggering of the popover. Popovers whose title and content are both zero-length are never displayed.toggleToggles an element\u2019s popover. Returns to the caller before the popover has actually been shown or hidden (i.e. before the shown.bs.popover or hidden.bs.popover event occurs). This is considered a \u201cmanual\u201d triggering of the popover.toggleEnabledToggles the ability for an element\u2019s popover to be shown or hidden.updateUpdates the position of an element\u2019s popover.// getOrCreateInstance exampleconst popover = bootstrap.Popover.getOrCreateInstance('#example') // Returns a Bootstrap popover instance// setContent examplepopover.setContent({  '.popover-header': 'another title',  '.popover-body': 'another content'})The setContent method accepts an object argument, where each property-key is a valid string selector within the popover template, and each related property-value can be string | element | function | nullEvents EventDescriptionhide.bs.popoverThis event is fired immediately when the hide instance method has been called.hidden.bs.popoverThis event is fired when the popover has finished being hidden from the user (will wait for CSS transitions to complete).inserted.bs.popoverThis event is fired after the show.bs.popover event when the popover template has been added to the DOM.show.bs.popoverThis event fires immediately when the show instance method is called.shown.bs.popoverThis event is fired when the popover has been made visible to the user (will wait for CSS transitions to complete).const myPopoverTrigger = document.getElementById('myPopover')myPopoverTrigger.addEventListener('hidden.bs.popover', () => {  // do something...})"
}