{
    "id": 53,
    "url": "https://getbootstrap.com/docs/5.3/components/tooltips/",
    "title": "Tooltips",
    "content": "View on GitHub                                Tooltips                Documentation and examples for adding custom Bootstrap tooltips with CSS and JavaScript using CSS3 for animations and data-bs-attributes for local title storage.                                    On this page                                On this page                                      Overview    Examples              Enable tooltips        Tooltips on links        Custom tooltips        Directions              CSS              Variables        Sass variables              Usage              Markup        Disabled elements        Options                      Using function with popperConfig                          Methods        Events                                              Overview Things to know when using the tooltip plugin:Tooltips rely on the third party library Popper for positioning. You must include popper.min.js before bootstrap.js, or use one bootstrap.bundle.min.js which contains Popper.Tooltips are opt-in for performance reasons, so you must initialize them yourself.Tooltips with zero-length titles are never displayed.Specify container: 'body' to avoid rendering problems in more complex components (like our input groups, button groups, etc).Triggering tooltips on hidden elements will not work.Tooltips for .disabled or disabled elements must be triggered on a wrapper element.When triggered from hyperlinks that span multiple lines, tooltips will be centered. Use white-space: nowrap; on your <a>s to avoid this behavior.Tooltips must be hidden before their corresponding elements have been removed from the DOM.Tooltips can be triggered thanks to an element inside a shadow DOM.Got all that? Great, let\u2019s see how they work with some examples.By default, this component uses the built-in content sanitizer, which strips out any HTML elements that are not explicitly allowed. See the sanitizer section in our JavaScript documentation for more details.The animation effect of this component is dependent on the prefers-reduced-motion media query. See the reduced motion section of our accessibility documentation.Examples Enable tooltips As mentioned above, you must initialize tooltips before they can be used. One way to initialize all tooltips on a page would be to select them by their data-bs-toggle attribute, like so:const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))Tooltips on links Hover over the links below to see tooltips:      Placeholder text to demonstrate some inline links with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of real text. And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you've now seen how these tooltips on links can work in practice, once you use them on your own site or project.          html                                                                                      <p class=\"muted\">Placeholder text to demonstrate some <a href=\"#\" data-bs-toggle=\"tooltip\" data-bs-title=\"Default tooltip\">inline links</a> with tooltips. This is now just filler, no killer. Content placed here just to mimic the presence of <a href=\"#\" data-bs-toggle=\"tooltip\" data-bs-title=\"Another tooltip\">real text</a>. And all that just to give you an idea of how tooltips would look when used in real-world situations. So hopefully you've now seen how <a href=\"#\" data-bs-toggle=\"tooltip\" data-bs-title=\"Another one here too\">these tooltips on links</a> can work in practice, once you use them on <a href=\"#\" data-bs-toggle=\"tooltip\" data-bs-title=\"The last tip!\">your own</a> site or project.</p>Feel free to use either title or data-bs-title in your HTML. When title is used, Popper will replace it automatically with data-bs-title when the element is rendered.Custom tooltips Added in v5.2.0You can customize the appearance of tooltips using CSS variables. We set a custom class with data-bs-custom-class=\"custom-tooltip\" to scope our custom appearance and use it to override a local CSS variable.          site/assets/scss/_component-examples.scss                                          .custom-tooltip {  --bs-tooltip-bg: var(--bd-violet-bg);  --bs-tooltip-color: var(--bs-white);}        Custom tooltip          html                                                                                      <button type=\"button\" class=\"btn btn-secondary\"        data-bs-toggle=\"tooltip\" data-bs-placement=\"top\"        data-bs-custom-class=\"custom-tooltip\"        data-bs-title=\"This top tooltip is themed via CSS variables.\">  Custom tooltip</button>Directions Hover over the buttons below to see the four tooltips directions: top, right, bottom, and left. Directions are mirrored when using Bootstrap in RTL.      Tooltip on top    Tooltip on right    Tooltip on bottom    Tooltip on left    Tooltip with HTML  <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" data-bs-title=\"Tooltip on top\">  Tooltip on top</button><button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-title=\"Tooltip on right\">  Tooltip on right</button><button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\" data-bs-title=\"Tooltip on bottom\">  Tooltip on bottom</button><button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-placement=\"left\" data-bs-title=\"Tooltip on left\">  Tooltip on left</button>And with custom HTML added:<button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"tooltip\" data-bs-html=\"true\" data-bs-title=\"<em>Tooltip</em> <u>with</u> <b>HTML</b>\">  Tooltip with HTML</button>With an SVG:                        CSS Variables Added in v5.2.0As part of Bootstrap\u2019s evolving CSS variables approach, tooltips now use local CSS variables on .tooltip for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.          scss/_tooltip.scss                                          --#{$prefix}tooltip-zindex: #{$zindex-tooltip};--#{$prefix}tooltip-max-width: #{$tooltip-max-width};--#{$prefix}tooltip-padding-x: #{$tooltip-padding-x};--#{$prefix}tooltip-padding-y: #{$tooltip-padding-y};--#{$prefix}tooltip-margin: #{$tooltip-margin};@include rfs($tooltip-font-size, --#{$prefix}tooltip-font-size);--#{$prefix}tooltip-color: #{$tooltip-color};--#{$prefix}tooltip-bg: #{$tooltip-bg};--#{$prefix}tooltip-border-radius: #{$tooltip-border-radius};--#{$prefix}tooltip-opacity: #{$tooltip-opacity};--#{$prefix}tooltip-arrow-width: #{$tooltip-arrow-width};--#{$prefix}tooltip-arrow-height: #{$tooltip-arrow-height};Sass variables           scss/_variables.scss                                          $tooltip-font-size:                 $font-size-sm;$tooltip-max-width:                 200px;$tooltip-color:                     var(--#{$prefix}body-bg);$tooltip-bg:                        var(--#{$prefix}emphasis-color);$tooltip-border-radius:             var(--#{$prefix}border-radius);$tooltip-opacity:                   .9;$tooltip-padding-y:                 $spacer * .25;$tooltip-padding-x:                 $spacer * .5;$tooltip-margin:                    null; // TODO: remove this in v6$tooltip-arrow-width:               .8rem;$tooltip-arrow-height:              .4rem;// fusv-disable$tooltip-arrow-color:               null; // Deprecated in Bootstrap 5.2.0 for CSS variables// fusv-enableUsage The tooltip plugin generates content and markup on demand, and by default places tooltips after their trigger element. Trigger the tooltip via JavaScript:const exampleEl = document.getElementById('example')const tooltip = new bootstrap.Tooltip(exampleEl, options)Tooltips automatically attempt to change positions when a parent container has overflow: auto or overflow: scroll, but still keeps the original placement\u2019s positioning. Set the boundary option (for the flip modifier using the popperConfig option) to any HTMLElement to override the default value, 'clippingParents', such as document.body:const tooltip = new bootstrap.Tooltip('#example', {  boundary: document.body // or document.querySelector('#boundary')})Markup The required markup for a tooltip is only a data attribute and title on the HTML element you wish to have a tooltip. The generated markup of a tooltip is rather simple, though it does require a position (by default, set to top by the plugin).Keep tooltips accessible to keyboard and assistive technology users by only adding them to HTML elements that are traditionally keyboard-focusable and interactive (such as links or form controls). While other HTML elements can be made focusable by adding tabindex=\"0\", this can create annoying and confusing tab stops on non-interactive elements for keyboard users, and most assistive technologies currently do not announce tooltips in this situation. Additionally, do not rely solely on hover as the trigger for your tooltips as this will make them impossible to trigger for keyboard users.<!-- HTML to write --><a href=\"#\" data-bs-toggle=\"tooltip\" data-bs-title=\"Some tooltip text!\">Hover over me</a><!-- Generated markup by the plugin --><div class=\"tooltip bs-tooltip-auto\" role=\"tooltip\">  <div class=\"tooltip-arrow\"></div>  <div class=\"tooltip-inner\">    Some tooltip text!  </div></div>Disabled elements Elements with the disabled attribute aren\u2019t interactive, meaning users cannot focus, hover, or click them to trigger a tooltip (or popover). As a workaround, you\u2019ll want to trigger the tooltip from a wrapper <div> or <span>, ideally made keyboard-focusable using tabindex=\"0\".        Disabled button          html                                                                                      <span class=\"d-inline-block\" tabindex=\"0\" data-bs-toggle=\"tooltip\" data-bs-title=\"Disabled tooltip\">  <button class=\"btn btn-primary\" type=\"button\" disabled>Disabled button</button></span>Options As options can be passed via data attributes or JavaScript, you can append an option name to data-bs-, as in data-bs-animation=\"{value}\". Make sure to change the case type of the option name from \u201ccamelCase\u201d to \u201ckebab-case\u201d when passing the options via data attributes. For example, use data-bs-custom-class=\"beautifier\" instead of data-bs-customClass=\"beautifier\".As of Bootstrap 5.2.0, all components support an experimental reserved data attribute data-bs-config that can house simple component configuration as a JSON string. When an element has data-bs-config='{\"delay\":0, \"title\":123}' and data-bs-title=\"456\" attributes, the final title value will be 456 and the separate data attributes will override values given on data-bs-config. In addition, existing data attributes are able to house JSON values like data-bs-delay='{\"show\":0,\"hide\":150}'.The final configuration object is the merged result of data-bs-config, data-bs-, and js object where the latest given key-value overrides the others.Note that for security reasons the sanitize, sanitizeFn, and allowList options cannot be supplied using data attributes.NameTypeDefaultDescriptionallowListobjectDefault valueObject which contains allowed attributes and tags.animationbooleantrueApply a CSS fade transition to the tooltip.boundarystring, element'clippingParents'Overflow constraint boundary of the tooltip (applies only to Popper\u2019s preventOverflow modifier). By default, it\u2019s 'clippingParents' and can accept an HTMLElement reference (via JavaScript only). For more information refer to Popper\u2019s detectOverflow docs.containerstring, element, falsefalseAppends the tooltip to a specific element. Example: container: 'body'. This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element -\u00a0which will prevent the tooltip from floating away from the triggering element during a window resize.customClassstring, function''Add classes to the tooltip when it is shown. Note that these classes will be added in addition to any classes specified in the template. To add multiple classes, separate them with spaces: 'class-1 class-2'. You can also pass a function that should return a single string containing additional class names.delaynumber, object0Delay showing and hiding the tooltip (ms)\u2014doesn\u2019t apply to manual trigger type. If a number is supplied, delay is applied to both hide/show. Object structure is: delay: { \"show\": 500, \"hide\": 100 }.fallbackPlacementsarray['top', 'right', 'bottom', 'left']Define fallback placements by providing a list of placements in array (in order of preference). For more information refer to Popper\u2019s behavior docs.htmlbooleanfalseAllow HTML in the tooltip. If true, HTML tags in the tooltip\u2019s title will be rendered in the tooltip. If false, innerText property will be used to insert content into the DOM. Use text if you\u2019re worried about XSS attacks.offsetarray, string, function[0, 0]Offset of the tooltip relative to its target. You can pass a string in data attributes with comma separated values like: data-bs-offset=\"10,20\". When a function is used to determine the offset, it is called with an object containing the popper placement, the reference, and popper rects as its first argument. The triggering element DOM node is passed as the second argument. The function must return an array with two numbers: skidding, distance. For more information refer to Popper\u2019s offset docs.placementstring, function'top'How to position the tooltip: auto, top, bottom, left, right. When auto is specified, it will dynamically reorient the tooltip. When a function is used to determine the placement, it is called with the tooltip DOM node as its first argument and the triggering element DOM node as its second. The this context is set to the tooltip instance.popperConfignull, object, functionnullTo change Bootstrap\u2019s default Popper config, see Popper\u2019s configuration. When a function is used to create the Popper configuration, it\u2019s called with an object that contains the Bootstrap\u2019s default Popper configuration. It helps you use and merge the default with your own configuration. The function must return a configuration object for Popper.sanitizebooleantrueEnable or disable the sanitization. If activated 'template', 'content' and 'title' options will be sanitized.sanitizeFnnull, functionnullHere you can supply your own sanitize function. This can be useful if you prefer to use a dedicated library to perform sanitization.selectorstring, falsefalseIf a selector is provided, tooltip objects will be delegated to the specified targets. In practice, this is used to also apply tooltips to dynamically added DOM elements (jQuery.on support). See this issue and an informative example. Note: title attribute must not be used as a selector.templatestring'<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>'Base HTML to use when creating the tooltip. The tooltip\u2019s title will be injected into the .tooltip-inner. .tooltip-arrow will become the tooltip\u2019s arrow. The outermost wrapper element should have the .tooltip class and role=\"tooltip\".titlestring, element, function''The tooltip title. If a function is given, it will be called with its this reference set to the element that the popover is attached to.triggerstring'hover focus'How tooltip is triggered: click, hover, focus, manual. You may pass multiple triggers; separate them with a space. 'manual' indicates that the tooltip will be triggered programmatically via the .tooltip('show'), .tooltip('hide') and .tooltip('toggle') methods; this value cannot be combined with any other trigger. 'hover' on its own will result in tooltips that cannot be triggered via the keyboard, and should only be used if alternative methods for conveying the same information for keyboard users is present.Data attributes for individual tooltips Options for individual tooltips can alternatively be specified through the use of data attributes, as explained above.Using function with popperConfig const tooltip = new bootstrap.Tooltip(element, {  popperConfig(defaultBsPopperConfig) {    // const newPopperConfig = {...}    // use defaultBsPopperConfig if needed...    // return newPopperConfig  }})Methods All API methods are asynchronous and start a transition. They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. Learn more in our JavaScript docs.MethodDescriptiondisableRemoves the ability for an element\u2019s tooltip to be shown. The tooltip will only be able to be shown if it is re-enabled.disposeHides and destroys an element\u2019s tooltip (Removes stored data on the DOM element). Tooltips that use delegation (which are created using the selector option) cannot be individually destroyed on descendant trigger elements.enableGives an element\u2019s tooltip the ability to be shown. Tooltips are enabled by default.getInstanceStatic method which allows you to get the tooltip instance associated with a DOM element, or create a new one in case it wasn\u2019t initialized.getOrCreateInstanceStatic method which allows you to get the tooltip instance associated with a DOM element, or create a new one in case it wasn\u2019t initialized.hideHides an element\u2019s tooltip. Returns to the caller before the tooltip has actually been hidden (i.e. before the hidden.bs.tooltip event occurs). This is considered a \u201cmanual\u201d triggering of the tooltip.setContentGives a way to change the tooltip\u2019s content after its initialization.showReveals an element\u2019s tooltip. Returns to the caller before the tooltip has actually been shown (i.e. before the shown.bs.tooltip event occurs). This is considered a \u201cmanual\u201d triggering of the tooltip. Tooltips with zero-length titles are never displayed.toggleToggles an element\u2019s tooltip. Returns to the caller before the tooltip has actually been shown or hidden (i.e. before the shown.bs.tooltip or hidden.bs.tooltip event occurs). This is considered a \u201cmanual\u201d triggering of the tooltip.toggleEnabledToggles the ability for an element\u2019s tooltip to be shown or hidden.updateUpdates the position of an element\u2019s tooltip.const tooltip = bootstrap.Tooltip.getInstance('#example') // Returns a Bootstrap tooltip instance// setContent exampletooltip.setContent({ '.tooltip-inner': 'another title' })The setContent method accepts an object argument, where each property-key is a valid string selector within the tooltip template, and each related property-value can be string | element | function | nullEvents EventDescriptionhide.bs.tooltipThis event is fired immediately when the hide instance method has been called.hidden.bs.tooltipThis event is fired when the tooltip has finished being hidden from the user (will wait for CSS transitions to complete).inserted.bs.tooltipThis event is fired after the show.bs.tooltip event when the tooltip template has been added to the DOM.show.bs.tooltipThis event fires immediately when the show instance method is called.shown.bs.tooltipThis event is fired when the tooltip has been made visible to the user (will wait for CSS transitions to complete).const myTooltipEl = document.getElementById('myTooltip')const tooltip = bootstrap.Tooltip.getOrCreateInstance(myTooltipEl)myTooltipEl.addEventListener('hidden.bs.tooltip', () => {  // do something...})tooltip.hide()"
}